// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/bcl/bcl.proto

package bcl

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimeSpan with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeSpan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSpan with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeSpanMultiError, or nil
// if none found.
func (m *TimeSpan) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSpan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Scale

	if len(errors) > 0 {
		return TimeSpanMultiError(errors)
	}

	return nil
}

// TimeSpanMultiError is an error wrapping multiple validation errors returned
// by TimeSpan.ValidateAll() if the designated constraints aren't met.
type TimeSpanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSpanMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSpanMultiError) AllErrors() []error { return m }

// TimeSpanValidationError is the validation error returned by
// TimeSpan.Validate if the designated constraints aren't met.
type TimeSpanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSpanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSpanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSpanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSpanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSpanValidationError) ErrorName() string { return "TimeSpanValidationError" }

// Error satisfies the builtin error interface
func (e TimeSpanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSpan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSpanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSpanValidationError{}

// Validate checks the field values on DateTime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DateTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DateTime with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DateTimeMultiError, or nil
// if none found.
func (m *DateTime) ValidateAll() error {
	return m.validate(true)
}

func (m *DateTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Scale

	// no validation rules for Kind

	if len(errors) > 0 {
		return DateTimeMultiError(errors)
	}

	return nil
}

// DateTimeMultiError is an error wrapping multiple validation errors returned
// by DateTime.ValidateAll() if the designated constraints aren't met.
type DateTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DateTimeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DateTimeMultiError) AllErrors() []error { return m }

// DateTimeValidationError is the validation error returned by
// DateTime.Validate if the designated constraints aren't met.
type DateTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DateTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DateTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DateTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DateTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DateTimeValidationError) ErrorName() string { return "DateTimeValidationError" }

// Error satisfies the builtin error interface
func (e DateTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDateTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DateTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DateTimeValidationError{}

// Validate checks the field values on NetObjectProxy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NetObjectProxy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetObjectProxy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NetObjectProxyMultiError,
// or nil if none found.
func (m *NetObjectProxy) ValidateAll() error {
	return m.validate(true)
}

func (m *NetObjectProxy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExistingObjectKey

	// no validation rules for NewObjectKey

	// no validation rules for ExistingTypeKey

	// no validation rules for NewTypeKey

	// no validation rules for TypeName

	// no validation rules for Payload

	if len(errors) > 0 {
		return NetObjectProxyMultiError(errors)
	}

	return nil
}

// NetObjectProxyMultiError is an error wrapping multiple validation errors
// returned by NetObjectProxy.ValidateAll() if the designated constraints
// aren't met.
type NetObjectProxyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetObjectProxyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetObjectProxyMultiError) AllErrors() []error { return m }

// NetObjectProxyValidationError is the validation error returned by
// NetObjectProxy.Validate if the designated constraints aren't met.
type NetObjectProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetObjectProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetObjectProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetObjectProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetObjectProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetObjectProxyValidationError) ErrorName() string { return "NetObjectProxyValidationError" }

// Error satisfies the builtin error interface
func (e NetObjectProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetObjectProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetObjectProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetObjectProxyValidationError{}

// Validate checks the field values on Guid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Guid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Guid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GuidMultiError, or nil if none found.
func (m *Guid) ValidateAll() error {
	return m.validate(true)
}

func (m *Guid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lo

	// no validation rules for Hi

	if len(errors) > 0 {
		return GuidMultiError(errors)
	}

	return nil
}

// GuidMultiError is an error wrapping multiple validation errors returned by
// Guid.ValidateAll() if the designated constraints aren't met.
type GuidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GuidMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GuidMultiError) AllErrors() []error { return m }

// GuidValidationError is the validation error returned by Guid.Validate if the
// designated constraints aren't met.
type GuidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuidValidationError) ErrorName() string { return "GuidValidationError" }

// Error satisfies the builtin error interface
func (e GuidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuidValidationError{}

// Validate checks the field values on Decimal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decimal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decimal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DecimalMultiError, or nil if none found.
func (m *Decimal) ValidateAll() error {
	return m.validate(true)
}

func (m *Decimal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lo

	// no validation rules for Hi

	// no validation rules for SignScale

	if len(errors) > 0 {
		return DecimalMultiError(errors)
	}

	return nil
}

// DecimalMultiError is an error wrapping multiple validation errors returned
// by Decimal.ValidateAll() if the designated constraints aren't met.
type DecimalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecimalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecimalMultiError) AllErrors() []error { return m }

// DecimalValidationError is the validation error returned by Decimal.Validate
// if the designated constraints aren't met.
type DecimalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecimalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecimalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecimalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecimalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecimalValidationError) ErrorName() string { return "DecimalValidationError" }

// Error satisfies the builtin error interface
func (e DecimalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecimal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecimalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecimalValidationError{}
