// The types in here indicate how protobuf-net represents certain types when using protobuf-net specific
// library features. Note that it is not *required* to use any of these types, and cross-platform code
// should usually avoid them completely (ideally starting from a .proto schema)

// Some of these are ugly, sorry. The TimeSpan / DateTime dates here pre-date the introduction of Timestamp
// and Duration, and the "well known" types should be preferred when possible. Guids are particularly
// awkward - it turns out that there are multiple guid representations, and I accidentally used one that
// I can only call... "crazy-endian". Just make sure you check the order!

// It should not be necessary to use bcl.proto from code that uses protobuf-net

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.2
// source: proto/bcl/bcl.proto

package bcl

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeSpan_TimeSpanScale int32

const (
	TimeSpan_DAYS         TimeSpan_TimeSpanScale = 0
	TimeSpan_HOURS        TimeSpan_TimeSpanScale = 1
	TimeSpan_MINUTES      TimeSpan_TimeSpanScale = 2
	TimeSpan_SECONDS      TimeSpan_TimeSpanScale = 3
	TimeSpan_MILLISECONDS TimeSpan_TimeSpanScale = 4
	TimeSpan_TICKS        TimeSpan_TimeSpanScale = 5
	TimeSpan_MINMAX       TimeSpan_TimeSpanScale = 15 // dubious
)

// Enum value maps for TimeSpan_TimeSpanScale.
var (
	TimeSpan_TimeSpanScale_name = map[int32]string{
		0:  "DAYS",
		1:  "HOURS",
		2:  "MINUTES",
		3:  "SECONDS",
		4:  "MILLISECONDS",
		5:  "TICKS",
		15: "MINMAX",
	}
	TimeSpan_TimeSpanScale_value = map[string]int32{
		"DAYS":         0,
		"HOURS":        1,
		"MINUTES":      2,
		"SECONDS":      3,
		"MILLISECONDS": 4,
		"TICKS":        5,
		"MINMAX":       15,
	}
)

func (x TimeSpan_TimeSpanScale) Enum() *TimeSpan_TimeSpanScale {
	p := new(TimeSpan_TimeSpanScale)
	*p = x
	return p
}

func (x TimeSpan_TimeSpanScale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSpan_TimeSpanScale) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bcl_bcl_proto_enumTypes[0].Descriptor()
}

func (TimeSpan_TimeSpanScale) Type() protoreflect.EnumType {
	return &file_proto_bcl_bcl_proto_enumTypes[0]
}

func (x TimeSpan_TimeSpanScale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSpan_TimeSpanScale.Descriptor instead.
func (TimeSpan_TimeSpanScale) EnumDescriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{0, 0}
}

type DateTime_TimeSpanScale int32

const (
	DateTime_DAYS         DateTime_TimeSpanScale = 0
	DateTime_HOURS        DateTime_TimeSpanScale = 1
	DateTime_MINUTES      DateTime_TimeSpanScale = 2
	DateTime_SECONDS      DateTime_TimeSpanScale = 3
	DateTime_MILLISECONDS DateTime_TimeSpanScale = 4
	DateTime_TICKS        DateTime_TimeSpanScale = 5
	DateTime_MINMAX       DateTime_TimeSpanScale = 15 // dubious
)

// Enum value maps for DateTime_TimeSpanScale.
var (
	DateTime_TimeSpanScale_name = map[int32]string{
		0:  "DAYS",
		1:  "HOURS",
		2:  "MINUTES",
		3:  "SECONDS",
		4:  "MILLISECONDS",
		5:  "TICKS",
		15: "MINMAX",
	}
	DateTime_TimeSpanScale_value = map[string]int32{
		"DAYS":         0,
		"HOURS":        1,
		"MINUTES":      2,
		"SECONDS":      3,
		"MILLISECONDS": 4,
		"TICKS":        5,
		"MINMAX":       15,
	}
)

func (x DateTime_TimeSpanScale) Enum() *DateTime_TimeSpanScale {
	p := new(DateTime_TimeSpanScale)
	*p = x
	return p
}

func (x DateTime_TimeSpanScale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTime_TimeSpanScale) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bcl_bcl_proto_enumTypes[1].Descriptor()
}

func (DateTime_TimeSpanScale) Type() protoreflect.EnumType {
	return &file_proto_bcl_bcl_proto_enumTypes[1]
}

func (x DateTime_TimeSpanScale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTime_TimeSpanScale.Descriptor instead.
func (DateTime_TimeSpanScale) EnumDescriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{1, 0}
}

type DateTime_DateTimeKind int32

const (
	// The time represented is not specified as either local time or Coordinated Universal Time (UTC).
	DateTime_UNSPECIFIED DateTime_DateTimeKind = 0
	// The time represented is UTC.
	DateTime_UTC DateTime_DateTimeKind = 1
	// The time represented is local time.
	DateTime_LOCAL DateTime_DateTimeKind = 2
)

// Enum value maps for DateTime_DateTimeKind.
var (
	DateTime_DateTimeKind_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UTC",
		2: "LOCAL",
	}
	DateTime_DateTimeKind_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UTC":         1,
		"LOCAL":       2,
	}
)

func (x DateTime_DateTimeKind) Enum() *DateTime_DateTimeKind {
	p := new(DateTime_DateTimeKind)
	*p = x
	return p
}

func (x DateTime_DateTimeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTime_DateTimeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bcl_bcl_proto_enumTypes[2].Descriptor()
}

func (DateTime_DateTimeKind) Type() protoreflect.EnumType {
	return &file_proto_bcl_bcl_proto_enumTypes[2]
}

func (x DateTime_DateTimeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTime_DateTimeKind.Descriptor instead.
func (DateTime_DateTimeKind) EnumDescriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{1, 1}
}

type TimeSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64                  `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`                               // the size of the timespan (in units of the selected scale)
	Scale TimeSpan_TimeSpanScale `protobuf:"varint,2,opt,name=scale,proto3,enum=bcl.TimeSpan_TimeSpanScale" json:"scale,omitempty"` // the scale of the timespan [default = DAYS]
}

func (x *TimeSpan) Reset() {
	*x = TimeSpan{}
	mi := &file_proto_bcl_bcl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSpan) ProtoMessage() {}

func (x *TimeSpan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcl_bcl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSpan.ProtoReflect.Descriptor instead.
func (*TimeSpan) Descriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{0}
}

func (x *TimeSpan) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimeSpan) GetScale() TimeSpan_TimeSpanScale {
	if x != nil {
		return x.Scale
	}
	return TimeSpan_DAYS
}

type DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64                  `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`                               // the offset (in units of the selected scale) from 1970/01/01
	Scale DateTime_TimeSpanScale `protobuf:"varint,2,opt,name=scale,proto3,enum=bcl.DateTime_TimeSpanScale" json:"scale,omitempty"` // the scale of the timespan [default = DAYS]
	Kind  DateTime_DateTimeKind  `protobuf:"varint,3,opt,name=kind,proto3,enum=bcl.DateTime_DateTimeKind" json:"kind,omitempty"`    // the kind of date/time being represented [default = UNSPECIFIED]
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	mi := &file_proto_bcl_bcl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcl_bcl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{1}
}

func (x *DateTime) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DateTime) GetScale() DateTime_TimeSpanScale {
	if x != nil {
		return x.Scale
	}
	return DateTime_DAYS
}

func (x *DateTime) GetKind() DateTime_DateTimeKind {
	if x != nil {
		return x.Kind
	}
	return DateTime_UNSPECIFIED
}

type NetObjectProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingObjectKey int32  `protobuf:"varint,1,opt,name=existingObjectKey,proto3" json:"existingObjectKey,omitempty"` // for a tracked object, the key of the **first** time this object was seen
	NewObjectKey      int32  `protobuf:"varint,2,opt,name=newObjectKey,proto3" json:"newObjectKey,omitempty"`           // for a tracked object, a **new** key, the first time this object is seen
	ExistingTypeKey   int32  `protobuf:"varint,3,opt,name=existingTypeKey,proto3" json:"existingTypeKey,omitempty"`     // for dynamic typing, the key of the **first** time this type was seen
	NewTypeKey        int32  `protobuf:"varint,4,opt,name=newTypeKey,proto3" json:"newTypeKey,omitempty"`               // for dynamic typing, a **new** key, the first time this type is seen
	TypeName          string `protobuf:"bytes,8,opt,name=typeName,proto3" json:"typeName,omitempty"`                    // for dynamic typing, the name of the type (only present along with newTypeKey)
	Payload           []byte `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`                     // the new string/value (only present along with newObjectKey)
}

func (x *NetObjectProxy) Reset() {
	*x = NetObjectProxy{}
	mi := &file_proto_bcl_bcl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetObjectProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetObjectProxy) ProtoMessage() {}

func (x *NetObjectProxy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcl_bcl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetObjectProxy.ProtoReflect.Descriptor instead.
func (*NetObjectProxy) Descriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{2}
}

func (x *NetObjectProxy) GetExistingObjectKey() int32 {
	if x != nil {
		return x.ExistingObjectKey
	}
	return 0
}

func (x *NetObjectProxy) GetNewObjectKey() int32 {
	if x != nil {
		return x.NewObjectKey
	}
	return 0
}

func (x *NetObjectProxy) GetExistingTypeKey() int32 {
	if x != nil {
		return x.ExistingTypeKey
	}
	return 0
}

func (x *NetObjectProxy) GetNewTypeKey() int32 {
	if x != nil {
		return x.NewTypeKey
	}
	return 0
}

func (x *NetObjectProxy) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *NetObjectProxy) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Guid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lo uint64 `protobuf:"fixed64,1,opt,name=lo,proto3" json:"lo,omitempty"` // the first 8 bytes of the guid (note:crazy-endian)
	Hi uint64 `protobuf:"fixed64,2,opt,name=hi,proto3" json:"hi,omitempty"` // the second 8 bytes of the guid (note:crazy-endian)
}

func (x *Guid) Reset() {
	*x = Guid{}
	mi := &file_proto_bcl_bcl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Guid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guid) ProtoMessage() {}

func (x *Guid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcl_bcl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guid.ProtoReflect.Descriptor instead.
func (*Guid) Descriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{3}
}

func (x *Guid) GetLo() uint64 {
	if x != nil {
		return x.Lo
	}
	return 0
}

func (x *Guid) GetHi() uint64 {
	if x != nil {
		return x.Hi
	}
	return 0
}

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lo        uint64 `protobuf:"varint,1,opt,name=lo,proto3" json:"lo,omitempty"`               // the first 64 bits of the underlying value
	Hi        uint32 `protobuf:"varint,2,opt,name=hi,proto3" json:"hi,omitempty"`               // the last 32 bis of the underlying value
	SignScale uint32 `protobuf:"varint,3,opt,name=signScale,proto3" json:"signScale,omitempty"` // the number of decimal digits (bits 1-16), and the sign (bit 0)
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	mi := &file_proto_bcl_bcl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcl_bcl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_proto_bcl_bcl_proto_rawDescGZIP(), []int{4}
}

func (x *Decimal) GetLo() uint64 {
	if x != nil {
		return x.Lo
	}
	return 0
}

func (x *Decimal) GetHi() uint32 {
	if x != nil {
		return x.Hi
	}
	return 0
}

func (x *Decimal) GetSignScale() uint32 {
	if x != nil {
		return x.SignScale
	}
	return 0
}

var File_proto_bcl_bcl_proto protoreflect.FileDescriptor

var file_proto_bcl_bcl_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x6c, 0x2f, 0x62, 0x63, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x62, 0x63, 0x6c, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62,
	0x63, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x22, 0x67, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x4f, 0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x49, 0x4e, 0x4d, 0x41, 0x58, 0x10, 0x0f, 0x22, 0xa1, 0x02, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x63,
	0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x62, 0x63, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x67, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f,
	0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x49, 0x4e, 0x4d, 0x41, 0x58, 0x10, 0x0f, 0x22, 0x33, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x54, 0x43,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xe2, 0x01,
	0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x26, 0x0a, 0x04, 0x47, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x68, 0x69, 0x22, 0x47, 0x0a, 0x07, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x68, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x1e, 0x5a, 0x0d, 0x62, 0x73, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x62, 0x63, 0x6c, 0xaa, 0x02, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e,
	0x42, 0x63, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bcl_bcl_proto_rawDescOnce sync.Once
	file_proto_bcl_bcl_proto_rawDescData = file_proto_bcl_bcl_proto_rawDesc
)

func file_proto_bcl_bcl_proto_rawDescGZIP() []byte {
	file_proto_bcl_bcl_proto_rawDescOnce.Do(func() {
		file_proto_bcl_bcl_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcl_bcl_proto_rawDescData)
	})
	return file_proto_bcl_bcl_proto_rawDescData
}

var file_proto_bcl_bcl_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_bcl_bcl_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_bcl_bcl_proto_goTypes = []any{
	(TimeSpan_TimeSpanScale)(0), // 0: bcl.TimeSpan.TimeSpanScale
	(DateTime_TimeSpanScale)(0), // 1: bcl.DateTime.TimeSpanScale
	(DateTime_DateTimeKind)(0),  // 2: bcl.DateTime.DateTimeKind
	(*TimeSpan)(nil),            // 3: bcl.TimeSpan
	(*DateTime)(nil),            // 4: bcl.DateTime
	(*NetObjectProxy)(nil),      // 5: bcl.NetObjectProxy
	(*Guid)(nil),                // 6: bcl.Guid
	(*Decimal)(nil),             // 7: bcl.Decimal
}
var file_proto_bcl_bcl_proto_depIdxs = []int32{
	0, // 0: bcl.TimeSpan.scale:type_name -> bcl.TimeSpan.TimeSpanScale
	1, // 1: bcl.DateTime.scale:type_name -> bcl.DateTime.TimeSpanScale
	2, // 2: bcl.DateTime.kind:type_name -> bcl.DateTime.DateTimeKind
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_bcl_bcl_proto_init() }
func file_proto_bcl_bcl_proto_init() {
	if File_proto_bcl_bcl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcl_bcl_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_bcl_bcl_proto_goTypes,
		DependencyIndexes: file_proto_bcl_bcl_proto_depIdxs,
		EnumInfos:         file_proto_bcl_bcl_proto_enumTypes,
		MessageInfos:      file_proto_bcl_bcl_proto_msgTypes,
	}.Build()
	File_proto_bcl_bcl_proto = out.File
	file_proto_bcl_bcl_proto_rawDesc = nil
	file_proto_bcl_bcl_proto_goTypes = nil
	file_proto_bcl_bcl_proto_depIdxs = nil
}
