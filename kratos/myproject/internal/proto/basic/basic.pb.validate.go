// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/basic/basic.proto

package basic

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on String with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *String) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on String with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StringMultiError, or nil if none found.
func (m *String) ValidateAll() error {
	return m.validate(true)
}

func (m *String) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return StringMultiError(errors)
	}

	return nil
}

// StringMultiError is an error wrapping multiple validation errors returned by
// String.ValidateAll() if the designated constraints aren't met.
type StringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringMultiError) AllErrors() []error { return m }

// StringValidationError is the validation error returned by String.Validate if
// the designated constraints aren't met.
type StringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringValidationError) ErrorName() string { return "StringValidationError" }

// Error satisfies the builtin error interface
func (e StringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringValidationError{}

// Validate checks the field values on Strings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Strings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Strings with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StringsMultiError, or nil if none found.
func (m *Strings) ValidateAll() error {
	return m.validate(true)
}

func (m *Strings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StringsMultiError(errors)
	}

	return nil
}

// StringsMultiError is an error wrapping multiple validation errors returned
// by Strings.ValidateAll() if the designated constraints aren't met.
type StringsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringsMultiError) AllErrors() []error { return m }

// StringsValidationError is the validation error returned by Strings.Validate
// if the designated constraints aren't met.
type StringsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringsValidationError) ErrorName() string { return "StringsValidationError" }

// Error satisfies the builtin error interface
func (e StringsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringsValidationError{}

// Validate checks the field values on Int32 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int32MultiError, or nil if none found.
func (m *Int32) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return Int32MultiError(errors)
	}

	return nil
}

// Int32MultiError is an error wrapping multiple validation errors returned by
// Int32.ValidateAll() if the designated constraints aren't met.
type Int32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int32MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int32MultiError) AllErrors() []error { return m }

// Int32ValidationError is the validation error returned by Int32.Validate if
// the designated constraints aren't met.
type Int32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32ValidationError) ErrorName() string { return "Int32ValidationError" }

// Error satisfies the builtin error interface
func (e Int32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32ValidationError{}

// Validate checks the field values on Int32S with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int32S) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32S with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int32SMultiError, or nil if none found.
func (m *Int32S) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32S) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Int32SMultiError(errors)
	}

	return nil
}

// Int32SMultiError is an error wrapping multiple validation errors returned by
// Int32S.ValidateAll() if the designated constraints aren't met.
type Int32SMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int32SMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int32SMultiError) AllErrors() []error { return m }

// Int32SValidationError is the validation error returned by Int32S.Validate if
// the designated constraints aren't met.
type Int32SValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32SValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32SValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32SValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32SValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32SValidationError) ErrorName() string { return "Int32SValidationError" }

// Error satisfies the builtin error interface
func (e Int32SValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32S.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32SValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32SValidationError{}

// Validate checks the field values on Int64 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int64MultiError, or nil if none found.
func (m *Int64) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return Int64MultiError(errors)
	}

	return nil
}

// Int64MultiError is an error wrapping multiple validation errors returned by
// Int64.ValidateAll() if the designated constraints aren't met.
type Int64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int64MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int64MultiError) AllErrors() []error { return m }

// Int64ValidationError is the validation error returned by Int64.Validate if
// the designated constraints aren't met.
type Int64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64ValidationError) ErrorName() string { return "Int64ValidationError" }

// Error satisfies the builtin error interface
func (e Int64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64ValidationError{}

// Validate checks the field values on Int64S with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64S) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64S with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in Int64SMultiError, or nil if none found.
func (m *Int64S) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64S) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Int64SMultiError(errors)
	}

	return nil
}

// Int64SMultiError is an error wrapping multiple validation errors returned by
// Int64S.ValidateAll() if the designated constraints aren't met.
type Int64SMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int64SMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int64SMultiError) AllErrors() []error { return m }

// Int64SValidationError is the validation error returned by Int64S.Validate if
// the designated constraints aren't met.
type Int64SValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64SValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64SValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64SValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64SValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64SValidationError) ErrorName() string { return "Int64SValidationError" }

// Error satisfies the builtin error interface
func (e Int64SValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64S.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64SValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64SValidationError{}

// Validate checks the field values on Float with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Float) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Float with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FloatMultiError, or nil if none found.
func (m *Float) ValidateAll() error {
	return m.validate(true)
}

func (m *Float) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return FloatMultiError(errors)
	}

	return nil
}

// FloatMultiError is an error wrapping multiple validation errors returned by
// Float.ValidateAll() if the designated constraints aren't met.
type FloatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FloatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FloatMultiError) AllErrors() []error { return m }

// FloatValidationError is the validation error returned by Float.Validate if
// the designated constraints aren't met.
type FloatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatValidationError) ErrorName() string { return "FloatValidationError" }

// Error satisfies the builtin error interface
func (e FloatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatValidationError{}

// Validate checks the field values on Floats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Floats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Floats with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FloatsMultiError, or nil if none found.
func (m *Floats) ValidateAll() error {
	return m.validate(true)
}

func (m *Floats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FloatsMultiError(errors)
	}

	return nil
}

// FloatsMultiError is an error wrapping multiple validation errors returned by
// Floats.ValidateAll() if the designated constraints aren't met.
type FloatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FloatsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FloatsMultiError) AllErrors() []error { return m }

// FloatsValidationError is the validation error returned by Floats.Validate if
// the designated constraints aren't met.
type FloatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatsValidationError) ErrorName() string { return "FloatsValidationError" }

// Error satisfies the builtin error interface
func (e FloatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatsValidationError{}

// Validate checks the field values on Double with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Double) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Double with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DoubleMultiError, or nil if none found.
func (m *Double) ValidateAll() error {
	return m.validate(true)
}

func (m *Double) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return DoubleMultiError(errors)
	}

	return nil
}

// DoubleMultiError is an error wrapping multiple validation errors returned by
// Double.ValidateAll() if the designated constraints aren't met.
type DoubleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoubleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoubleMultiError) AllErrors() []error { return m }

// DoubleValidationError is the validation error returned by Double.Validate if
// the designated constraints aren't met.
type DoubleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleValidationError) ErrorName() string { return "DoubleValidationError" }

// Error satisfies the builtin error interface
func (e DoubleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouble.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleValidationError{}

// Validate checks the field values on Doubles with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Doubles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Doubles with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DoublesMultiError, or nil if none found.
func (m *Doubles) ValidateAll() error {
	return m.validate(true)
}

func (m *Doubles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DoublesMultiError(errors)
	}

	return nil
}

// DoublesMultiError is an error wrapping multiple validation errors returned
// by Doubles.ValidateAll() if the designated constraints aren't met.
type DoublesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoublesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoublesMultiError) AllErrors() []error { return m }

// DoublesValidationError is the validation error returned by Doubles.Validate
// if the designated constraints aren't met.
type DoublesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoublesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoublesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoublesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoublesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoublesValidationError) ErrorName() string { return "DoublesValidationError" }

// Error satisfies the builtin error interface
func (e DoublesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoublesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoublesValidationError{}

// Validate checks the field values on Bool with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bool with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BoolMultiError, or nil if none found.
func (m *Bool) ValidateAll() error {
	return m.validate(true)
}

func (m *Bool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return BoolMultiError(errors)
	}

	return nil
}

// BoolMultiError is an error wrapping multiple validation errors returned by
// Bool.ValidateAll() if the designated constraints aren't met.
type BoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolMultiError) AllErrors() []error { return m }

// BoolValidationError is the validation error returned by Bool.Validate if the
// designated constraints aren't met.
type BoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolValidationError) ErrorName() string { return "BoolValidationError" }

// Error satisfies the builtin error interface
func (e BoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolValidationError{}

// Validate checks the field values on Bools with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bools) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bools with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BoolsMultiError, or nil if none found.
func (m *Bools) ValidateAll() error {
	return m.validate(true)
}

func (m *Bools) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BoolsMultiError(errors)
	}

	return nil
}

// BoolsMultiError is an error wrapping multiple validation errors returned by
// Bools.ValidateAll() if the designated constraints aren't met.
type BoolsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolsMultiError) AllErrors() []error { return m }

// BoolsValidationError is the validation error returned by Bools.Validate if
// the designated constraints aren't met.
type BoolsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolsValidationError) ErrorName() string { return "BoolsValidationError" }

// Error satisfies the builtin error interface
func (e BoolsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBools.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolsValidationError{}

// Validate checks the field values on Bytes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bytes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bytes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BytesMultiError, or nil if none found.
func (m *Bytes) ValidateAll() error {
	return m.validate(true)
}

func (m *Bytes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return BytesMultiError(errors)
	}

	return nil
}

// BytesMultiError is an error wrapping multiple validation errors returned by
// Bytes.ValidateAll() if the designated constraints aren't met.
type BytesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BytesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BytesMultiError) AllErrors() []error { return m }

// BytesValidationError is the validation error returned by Bytes.Validate if
// the designated constraints aren't met.
type BytesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesValidationError) ErrorName() string { return "BytesValidationError" }

// Error satisfies the builtin error interface
func (e BytesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesValidationError{}

// Validate checks the field values on Byteses with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Byteses) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Byteses with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BytesesMultiError, or nil if none found.
func (m *Byteses) ValidateAll() error {
	return m.validate(true)
}

func (m *Byteses) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BytesesMultiError(errors)
	}

	return nil
}

// BytesesMultiError is an error wrapping multiple validation errors returned
// by Byteses.ValidateAll() if the designated constraints aren't met.
type BytesesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BytesesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BytesesMultiError) AllErrors() []error { return m }

// BytesesValidationError is the validation error returned by Byteses.Validate
// if the designated constraints aren't met.
type BytesesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesesValidationError) ErrorName() string { return "BytesesValidationError" }

// Error satisfies the builtin error interface
func (e BytesesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sByteses.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesesValidationError{}

// Validate checks the field values on KVStrings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KVStrings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVStrings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KVStringsMultiError, or nil
// if none found.
func (m *KVStrings) ValidateAll() error {
	return m.validate(true)
}

func (m *KVStrings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KVStringsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KVStringsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KVStringsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return KVStringsMultiError(errors)
	}

	return nil
}

// KVStringsMultiError is an error wrapping multiple validation errors returned
// by KVStrings.ValidateAll() if the designated constraints aren't met.
type KVStringsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVStringsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVStringsMultiError) AllErrors() []error { return m }

// KVStringsValidationError is the validation error returned by
// KVStrings.Validate if the designated constraints aren't met.
type KVStringsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVStringsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVStringsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVStringsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVStringsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVStringsValidationError) ErrorName() string { return "KVStringsValidationError" }

// Error satisfies the builtin error interface
func (e KVStringsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVStrings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVStringsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVStringsValidationError{}

// Validate checks the field values on KVStringAtString with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KVStringAtString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVStringAtString with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KVStringAtStringMultiError, or nil if none found.
func (m *KVStringAtString) ValidateAll() error {
	return m.validate(true)
}

func (m *KVStringAtString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return KVStringAtStringMultiError(errors)
	}

	return nil
}

// KVStringAtStringMultiError is an error wrapping multiple validation errors
// returned by KVStringAtString.ValidateAll() if the designated constraints
// aren't met.
type KVStringAtStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVStringAtStringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVStringAtStringMultiError) AllErrors() []error { return m }

// KVStringAtStringValidationError is the validation error returned by
// KVStringAtString.Validate if the designated constraints aren't met.
type KVStringAtStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVStringAtStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVStringAtStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVStringAtStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVStringAtStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVStringAtStringValidationError) ErrorName() string { return "KVStringAtStringValidationError" }

// Error satisfies the builtin error interface
func (e KVStringAtStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVStringAtString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVStringAtStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVStringAtStringValidationError{}

// Validate checks the field values on KVInt64AtString with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KVInt64AtString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVInt64AtString with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KVInt64AtStringMultiError, or nil if none found.
func (m *KVInt64AtString) ValidateAll() error {
	return m.validate(true)
}

func (m *KVInt64AtString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return KVInt64AtStringMultiError(errors)
	}

	return nil
}

// KVInt64AtStringMultiError is an error wrapping multiple validation errors
// returned by KVInt64AtString.ValidateAll() if the designated constraints
// aren't met.
type KVInt64AtStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVInt64AtStringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVInt64AtStringMultiError) AllErrors() []error { return m }

// KVInt64AtStringValidationError is the validation error returned by
// KVInt64AtString.Validate if the designated constraints aren't met.
type KVInt64AtStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVInt64AtStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVInt64AtStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVInt64AtStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVInt64AtStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVInt64AtStringValidationError) ErrorName() string { return "KVInt64AtStringValidationError" }

// Error satisfies the builtin error interface
func (e KVInt64AtStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVInt64AtString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVInt64AtStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVInt64AtStringValidationError{}

// Validate checks the field values on KVInt32AtString with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KVInt32AtString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVInt32AtString with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KVInt32AtStringMultiError, or nil if none found.
func (m *KVInt32AtString) ValidateAll() error {
	return m.validate(true)
}

func (m *KVInt32AtString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return KVInt32AtStringMultiError(errors)
	}

	return nil
}

// KVInt32AtStringMultiError is an error wrapping multiple validation errors
// returned by KVInt32AtString.ValidateAll() if the designated constraints
// aren't met.
type KVInt32AtStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVInt32AtStringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVInt32AtStringMultiError) AllErrors() []error { return m }

// KVInt32AtStringValidationError is the validation error returned by
// KVInt32AtString.Validate if the designated constraints aren't met.
type KVInt32AtStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVInt32AtStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVInt32AtStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVInt32AtStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVInt32AtStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVInt32AtStringValidationError) ErrorName() string { return "KVInt32AtStringValidationError" }

// Error satisfies the builtin error interface
func (e KVInt32AtStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVInt32AtString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVInt32AtStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVInt32AtStringValidationError{}

// Validate checks the field values on KVInt64AtInt64S with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KVInt64AtInt64S) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVInt64AtInt64S with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KVInt64AtInt64SMultiError, or nil if none found.
func (m *KVInt64AtInt64S) ValidateAll() error {
	return m.validate(true)
}

func (m *KVInt64AtInt64S) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return KVInt64AtInt64SMultiError(errors)
	}

	return nil
}

// KVInt64AtInt64SMultiError is an error wrapping multiple validation errors
// returned by KVInt64AtInt64S.ValidateAll() if the designated constraints
// aren't met.
type KVInt64AtInt64SMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVInt64AtInt64SMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVInt64AtInt64SMultiError) AllErrors() []error { return m }

// KVInt64AtInt64SValidationError is the validation error returned by
// KVInt64AtInt64S.Validate if the designated constraints aren't met.
type KVInt64AtInt64SValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVInt64AtInt64SValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVInt64AtInt64SValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVInt64AtInt64SValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVInt64AtInt64SValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVInt64AtInt64SValidationError) ErrorName() string { return "KVInt64AtInt64SValidationError" }

// Error satisfies the builtin error interface
func (e KVInt64AtInt64SValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVInt64AtInt64S.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVInt64AtInt64SValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVInt64AtInt64SValidationError{}

// Validate checks the field values on KVInt32AtInt32S with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KVInt32AtInt32S) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KVInt32AtInt32S with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KVInt32AtInt32SMultiError, or nil if none found.
func (m *KVInt32AtInt32S) ValidateAll() error {
	return m.validate(true)
}

func (m *KVInt32AtInt32S) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return KVInt32AtInt32SMultiError(errors)
	}

	return nil
}

// KVInt32AtInt32SMultiError is an error wrapping multiple validation errors
// returned by KVInt32AtInt32S.ValidateAll() if the designated constraints
// aren't met.
type KVInt32AtInt32SMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KVInt32AtInt32SMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KVInt32AtInt32SMultiError) AllErrors() []error { return m }

// KVInt32AtInt32SValidationError is the validation error returned by
// KVInt32AtInt32S.Validate if the designated constraints aren't met.
type KVInt32AtInt32SValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KVInt32AtInt32SValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KVInt32AtInt32SValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KVInt32AtInt32SValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KVInt32AtInt32SValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KVInt32AtInt32SValidationError) ErrorName() string { return "KVInt32AtInt32SValidationError" }

// Error satisfies the builtin error interface
func (e KVInt32AtInt32SValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKVInt32AtInt32S.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KVInt32AtInt32SValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KVInt32AtInt32SValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on File with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FileMultiError, or nil if none found.
func (m *File) ValidateAll() error {
	return m.validate(true)
}

func (m *File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Data

	// no validation rules for DataStr

	if len(errors) > 0 {
		return FileMultiError(errors)
	}

	return nil
}

// FileMultiError is an error wrapping multiple validation errors returned by
// File.ValidateAll() if the designated constraints aren't met.
type FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMultiError) AllErrors() []error { return m }

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on Files with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Files) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Files with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilesMultiError, or nil if none found.
func (m *Files) ValidateAll() error {
	return m.validate(true)
}

func (m *Files) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilesValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilesValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FilesMultiError(errors)
	}

	return nil
}

// FilesMultiError is an error wrapping multiple validation errors returned by
// Files.ValidateAll() if the designated constraints aren't met.
type FilesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilesMultiError) AllErrors() []error { return m }

// FilesValidationError is the validation error returned by Files.Validate if
// the designated constraints aren't met.
type FilesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilesValidationError) ErrorName() string { return "FilesValidationError" }

// Error satisfies the builtin error interface
func (e FilesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFiles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilesValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectMultiError, or nil if none found.
func (m *Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContentType

	// no validation rules for ContentDisposition

	// no validation rules for Data

	if len(errors) > 0 {
		return ObjectMultiError(errors)
	}

	return nil
}

// ObjectMultiError is an error wrapping multiple validation errors returned by
// Object.ValidateAll() if the designated constraints aren't met.
type ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMultiError) AllErrors() []error { return m }

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on PageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageRequestMultiError, or
// nil if none found.
func (m *PageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Size

	if len(errors) > 0 {
		return PageRequestMultiError(errors)
	}

	return nil
}

// PageRequestMultiError is an error wrapping multiple validation errors
// returned by PageRequest.ValidateAll() if the designated constraints aren't met.
type PageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageRequestMultiError) AllErrors() []error { return m }

// PageRequestValidationError is the validation error returned by
// PageRequest.Validate if the designated constraints aren't met.
type PageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageRequestValidationError) ErrorName() string { return "PageRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageRequestValidationError{}

// Validate checks the field values on PageResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageResponseMultiError, or
// nil if none found.
func (m *PageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Index != nil {
		// no validation rules for Index
	}

	if m.Size != nil {
		// no validation rules for Size
	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if len(errors) > 0 {
		return PageResponseMultiError(errors)
	}

	return nil
}

// PageResponseMultiError is an error wrapping multiple validation errors
// returned by PageResponse.ValidateAll() if the designated constraints aren't met.
type PageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResponseMultiError) AllErrors() []error { return m }

// PageResponseValidationError is the validation error returned by
// PageResponse.Validate if the designated constraints aren't met.
type PageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResponseValidationError) ErrorName() string { return "PageResponseValidationError" }

// Error satisfies the builtin error interface
func (e PageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResponseValidationError{}

// Validate checks the field values on IdInt32 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdInt32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdInt32 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdInt32MultiError, or nil if none found.
func (m *IdInt32) ValidateAll() error {
	return m.validate(true)
}

func (m *IdInt32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdInt32MultiError(errors)
	}

	return nil
}

// IdInt32MultiError is an error wrapping multiple validation errors returned
// by IdInt32.ValidateAll() if the designated constraints aren't met.
type IdInt32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdInt32MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdInt32MultiError) AllErrors() []error { return m }

// IdInt32ValidationError is the validation error returned by IdInt32.Validate
// if the designated constraints aren't met.
type IdInt32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdInt32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdInt32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdInt32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdInt32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdInt32ValidationError) ErrorName() string { return "IdInt32ValidationError" }

// Error satisfies the builtin error interface
func (e IdInt32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdInt32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdInt32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdInt32ValidationError{}

// Validate checks the field values on IdsInt32 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdsInt32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsInt32 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdsInt32MultiError, or nil
// if none found.
func (m *IdsInt32) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsInt32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IdsInt32MultiError(errors)
	}

	return nil
}

// IdsInt32MultiError is an error wrapping multiple validation errors returned
// by IdsInt32.ValidateAll() if the designated constraints aren't met.
type IdsInt32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsInt32MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsInt32MultiError) AllErrors() []error { return m }

// IdsInt32ValidationError is the validation error returned by
// IdsInt32.Validate if the designated constraints aren't met.
type IdsInt32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsInt32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsInt32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsInt32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsInt32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsInt32ValidationError) ErrorName() string { return "IdsInt32ValidationError" }

// Error satisfies the builtin error interface
func (e IdsInt32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsInt32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsInt32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsInt32ValidationError{}

// Validate checks the field values on IdString with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdStringMultiError, or nil
// if none found.
func (m *IdString) ValidateAll() error {
	return m.validate(true)
}

func (m *IdString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdStringMultiError(errors)
	}

	return nil
}

// IdStringMultiError is an error wrapping multiple validation errors returned
// by IdString.ValidateAll() if the designated constraints aren't met.
type IdStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdStringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdStringMultiError) AllErrors() []error { return m }

// IdStringValidationError is the validation error returned by
// IdString.Validate if the designated constraints aren't met.
type IdStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdStringValidationError) ErrorName() string { return "IdStringValidationError" }

// Error satisfies the builtin error interface
func (e IdStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdStringValidationError{}

// Validate checks the field values on IdsString with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdsString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdsString with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdsStringMultiError, or nil
// if none found.
func (m *IdsString) ValidateAll() error {
	return m.validate(true)
}

func (m *IdsString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IdsStringMultiError(errors)
	}

	return nil
}

// IdsStringMultiError is an error wrapping multiple validation errors returned
// by IdsString.ValidateAll() if the designated constraints aren't met.
type IdsStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdsStringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdsStringMultiError) AllErrors() []error { return m }

// IdsStringValidationError is the validation error returned by
// IdsString.Validate if the designated constraints aren't met.
type IdsStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdsStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdsStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdsStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdsStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdsStringValidationError) ErrorName() string { return "IdsStringValidationError" }

// Error satisfies the builtin error interface
func (e IdsStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdsString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdsStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdsStringValidationError{}
