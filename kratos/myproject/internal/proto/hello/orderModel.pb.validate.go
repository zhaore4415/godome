// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/hello/orderModel.proto

package hello

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderRequestMultiError, or nil if none found.
func (m *AddOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WarehouseId

	// no validation rules for CompanyId

	// no validation rules for OrderSn

	// no validation rules for Consignee

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for PostalCode

	// no validation rules for CountryCode

	// no validation rules for Province

	// no validation rules for City

	// no validation rules for District

	// no validation rules for Address

	// no validation rules for AddressBack

	// no validation rules for CodAmount

	// no validation rules for CurrencyCode

	for idx, item := range m.GetGoodInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddOrderRequestValidationError{
						field:  fmt.Sprintf("GoodInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddOrderRequestValidationError{
						field:  fmt.Sprintf("GoodInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddOrderRequestValidationError{
					field:  fmt.Sprintf("GoodInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddOrderRequestMultiError(errors)
	}

	return nil
}

// AddOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AddOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderRequestMultiError) AllErrors() []error { return m }

// AddOrderRequestValidationError is the validation error returned by
// AddOrderRequest.Validate if the designated constraints aren't met.
type AddOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderRequestValidationError) ErrorName() string { return "AddOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderRequestValidationError{}

// Validate checks the field values on GoodInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GoodInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GoodInfoMultiError, or nil
// if none found.
func (m *GoodInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GoodId

	// no validation rules for Qty

	// no validation rules for GoodNum

	if len(errors) > 0 {
		return GoodInfoMultiError(errors)
	}

	return nil
}

// GoodInfoMultiError is an error wrapping multiple validation errors returned
// by GoodInfo.ValidateAll() if the designated constraints aren't met.
type GoodInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodInfoMultiError) AllErrors() []error { return m }

// GoodInfoValidationError is the validation error returned by
// GoodInfo.Validate if the designated constraints aren't met.
type GoodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodInfoValidationError) ErrorName() string { return "GoodInfoValidationError" }

// Error satisfies the builtin error interface
func (e GoodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodInfoValidationError{}

// Validate checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderRequestMultiError, or nil if none found.
func (m *UpdateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderSn

	// no validation rules for Consignee

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for PostalCode

	// no validation rules for CountryCode

	// no validation rules for Province

	// no validation rules for City

	// no validation rules for District

	// no validation rules for Address

	// no validation rules for AddressBack

	// no validation rules for CodAmount

	// no validation rules for CurrencyCode

	if len(errors) > 0 {
		return UpdateOrderRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderRequestMultiError) AllErrors() []error { return m }

// UpdateOrderRequestValidationError is the validation error returned by
// UpdateOrderRequest.Validate if the designated constraints aren't met.
type UpdateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderRequestValidationError) ErrorName() string {
	return "UpdateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderRequestValidationError{}

// Validate checks the field values on OrderInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderInfoMultiError, or nil
// if none found.
func (m *OrderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WarehouseName

	// no validation rules for CopNo

	// no validation rules for OrderSn

	// no validation rules for LogisticsCode

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return OrderInfoMultiError(errors)
	}

	return nil
}

// OrderInfoMultiError is an error wrapping multiple validation errors returned
// by OrderInfo.ValidateAll() if the designated constraints aren't met.
type OrderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoMultiError) AllErrors() []error { return m }

// OrderInfoValidationError is the validation error returned by
// OrderInfo.Validate if the designated constraints aren't met.
type OrderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoValidationError) ErrorName() string { return "OrderInfoValidationError" }

// Error satisfies the builtin error interface
func (e OrderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoValidationError{}

// Validate checks the field values on OrderRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderRequestMultiError, or
// nil if none found.
func (m *OrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Size

	// no validation rules for Keyword

	if len(errors) > 0 {
		return OrderRequestMultiError(errors)
	}

	return nil
}

// OrderRequestMultiError is an error wrapping multiple validation errors
// returned by OrderRequest.ValidateAll() if the designated constraints aren't met.
type OrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderRequestMultiError) AllErrors() []error { return m }

// OrderRequestValidationError is the validation error returned by
// OrderRequest.Validate if the designated constraints aren't met.
type OrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderRequestValidationError) ErrorName() string { return "OrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderRequestValidationError{}

// Validate checks the field values on OrderListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListResponseMultiError, or nil if none found.
func (m *OrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Index

	// no validation rules for Size

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderListResponseMultiError(errors)
	}

	return nil
}

// OrderListResponseMultiError is an error wrapping multiple validation errors
// returned by OrderListResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListResponseMultiError) AllErrors() []error { return m }

// OrderListResponseValidationError is the validation error returned by
// OrderListResponse.Validate if the designated constraints aren't met.
type OrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResponseValidationError) ErrorName() string {
	return "OrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResponseValidationError{}

// Validate checks the field values on OrderDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderDetailMultiError, or
// nil if none found.
func (m *OrderDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WarehouseName

	// no validation rules for CopNo

	// no validation rules for OrderSn

	// no validation rules for LogisticsCode

	for idx, item := range m.GetGoodInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderDetailValidationError{
						field:  fmt.Sprintf("GoodInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderDetailValidationError{
						field:  fmt.Sprintf("GoodInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderDetailValidationError{
					field:  fmt.Sprintf("GoodInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return OrderDetailMultiError(errors)
	}

	return nil
}

// OrderDetailMultiError is an error wrapping multiple validation errors
// returned by OrderDetail.ValidateAll() if the designated constraints aren't met.
type OrderDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderDetailMultiError) AllErrors() []error { return m }

// OrderDetailValidationError is the validation error returned by
// OrderDetail.Validate if the designated constraints aren't met.
type OrderDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderDetailValidationError) ErrorName() string { return "OrderDetailValidationError" }

// Error satisfies the builtin error interface
func (e OrderDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderDetailValidationError{}
