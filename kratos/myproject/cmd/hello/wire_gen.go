// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"myproject/api/grpc"
	"myproject/api/http"
	"myproject/core"
	"myproject/data"
	"myproject/internal/micro/client"
	"myproject/internal/micro/registry"
	"myproject/internal/proto/hello"
	"bsi/kratos/micro/gorm"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, bootstrap *hello.Bootstrap) (*kratos.App, func(), error) {
	apiClient, err := registry.NewConsulClient(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	discovery := registry.NewConsulDiscovery(apiClient)
	clientClient, err := client.NewClient(discovery)
	if err != nil {
		return nil, nil, err
	}
	db, err := data.NewData(logger, bootstrap)
	if err != nil {
		return nil, nil, err
	}
	gormDB := gorm.NewGromDB(db)
	userRepo := data.NewUserRepo(logger, gormDB)
	greeterService := core.NewGreeterService(clientClient, userRepo, logger)
	greeterHandler := grpc.NewGreeterHandler(greeterService)
	transactionScope := gorm.NewTransactionScope(db)
	userService := core.NewUserService(clientClient, userRepo, logger, transactionScope)
	userHandler := grpc.NewUserHandler(userService)
	server := grpc.NewGRPCServer(logger, bootstrap, greeterHandler, userHandler)
	engine := http.NewHttpRouter()
	homeController := http.NewHomeController(engine, greeterService)
	httpServer := http.NewHTTPServer(logger, bootstrap, engine, homeController)
	registrar := registry.NewConsulRegistry(apiClient)
	app := newApp(logger, bootstrap, server, httpServer, registrar, discovery)
	return app, func() {
	}, nil
}
